import threading
from virtual_camera_manager import VirtualCameraManager
from PIL import Image
import numpy as np


class AutoVirtualCamera:
    """
    –ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
    –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–µ
    """
    
    def __init__(self, original_class):
        """
        Args:
            original_class: –í–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –∫–∞–º–µ—Ä—ã
        """
        self.original_class = original_class
        self.virtual_camera = None
        self.is_virtual_camera_started = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback
        self._original_frame_callback = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
        self.virtual_cam_width = 1280
        self.virtual_cam_height = 720
        self.virtual_cam_fps = 30
        
    def __getattr__(self, name):
        """–ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∫–ª–∞—Å—Å—É"""
        return getattr(self.original_class, name)
        
    def connect_to_camera(self, *args, **kwargs):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
        """
        print("üì∑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–µ...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        if not self.is_virtual_camera_started:
            self._start_virtual_camera()
            
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–µ
        result = self.original_class.connect_to_camera(*args, **kwargs)
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º callback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–¥—Ä–æ–≤
        self._intercept_frame_callback()
        
        return result
        
    def _start_virtual_camera(self):
        """–ó–∞–ø—É—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É...")
            self.virtual_camera = VirtualCameraManager(
                width=self.virtual_cam_width,
                height=self.virtual_cam_height,
                fps=self.virtual_cam_fps
            )
            self.virtual_camera.start()
            
            if self.virtual_camera.is_initialized:
                self.is_virtual_camera_started = True
                print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
                print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {self.virtual_cam_width}x{self.virtual_cam_height}")
                print(f"   FPS: {self.virtual_cam_fps}")
                print("   –î–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∫: OBS Virtual Camera")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã: {e}")
            self.is_virtual_camera_started = False
            
    def _intercept_frame_callback(self):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º frame callback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–¥—Ä–æ–≤"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback
        if hasattr(self.original_class, 'frame_callback'):
            self._original_frame_callback = self.original_class.frame_callback
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à callback-–æ–±–µ—Ä—Ç–∫—É
        if hasattr(self.original_class, '_frame_captured_callback'):
            original_callback = self.original_class._frame_captured_callback
            
            def wrapped_callback(video_capture, frame, custom_object):
                # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback
                result = original_callback(video_capture, frame, custom_object)
                
                # –ï—Å–ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞ –∫–æ–ø–∏—é
                if self.is_virtual_camera_started and self.virtual_camera:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if hasattr(frame, 'GetImage'):
                            pil_image = frame.GetImage()
                        elif isinstance(frame, np.ndarray):
                            pil_image = Image.fromarray(frame)
                        else:
                            pil_image = frame
                            
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É
                        if pil_image:
                            pil_image_copy = pil_image.copy() if hasattr(pil_image, 'copy') else pil_image
                            self.virtual_camera.send_frame(pil_image_copy)
                            
                    except Exception as e:
                        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        pass
                        
                return result
                
            # –ó–∞–º–µ–Ω—è–µ–º callback
            self.original_class._frame_captured_callback = wrapped_callback
            
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        print("üì∑ –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–∞–º–µ—Ä—ã...")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
        if hasattr(self.original_class, 'disconnect'):
            self.original_class.disconnect()
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É
        if self.is_virtual_camera_started and self.virtual_camera:
            print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É...")
            self.virtual_camera.stop()
            self.is_virtual_camera_started = False
            
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        if self.is_virtual_camera_started and self.virtual_camera:
            self.virtual_camera.stop()


class EnhancedCameraWrapper:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–ª–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –∫–∞–º–µ—Ä—ã
    —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
    """
    
    def __init__(self):
        self.engine = None
        self.frame_callback = None
        self.camera_info = {'frames_processed': 0}
        
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞
        self.virtual_camera = None
        self.virtual_camera_enabled = True  # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å
        
    def initialize_camera(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É
        if self.virtual_camera_enabled and not self.virtual_camera:
            try:
                print("üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É...")
                self.virtual_camera = VirtualCameraManager(
                    width=1280, 
                    height=720, 
                    fps=30
                )
                self.virtual_camera.start()
                
                if self.virtual_camera.is_initialized:
                    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
                else:
                    print("‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    self.virtual_camera = None
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã: {e}")
                self.virtual_camera = None
                
    def _frame_captured_callback(self, video_capture, frame, custom_object):
        """
        Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É
        """
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.camera_info['frames_processed'] += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LPR engine
        if self.engine:
            ret = self.engine.PutFrame(frame, frame.Timestamp())
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π 2-–π –∫–∞–¥—Ä
        if self.camera_info['frames_processed'] % 2 == 0:
            # –ü–æ–ª—É—á–∞–µ–º PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            pil_image = frame.GetImage()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback –¥–ª—è –ø—Ä–µ–≤—å—é
            if self.frame_callback:
                self.frame_callback(pil_image)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É
            if self.virtual_camera and self.virtual_camera.is_initialized:
                try:
                    pil_image_copy = pil_image.copy()
                    self.virtual_camera.send_frame(pil_image_copy)
                except Exception as e:
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    pass
                    
    def set_virtual_camera_enabled(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        self.virtual_camera_enabled = enabled
        
        if enabled and not self.virtual_camera:
            self.initialize_camera()
        elif not enabled and self.virtual_camera:
            self.virtual_camera.stop()
            self.virtual_camera = None
            
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.virtual_camera:
            self.virtual_camera.stop()
            self.virtual_camera = None
            
    def __del__(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        self.cleanup()